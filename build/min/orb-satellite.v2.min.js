var Orb = Orb || { VERSION: "2.3.1 (20200124)", AUTHOR: "Isana Kashiwai", LICENSE: "MIT" }; Orb.Constant = Orb.Constant || { PI: Math.PI, RAD: Math.PI / 180, AU: 149597870.7, RE: 6378.137, LD: 384e3, LY: Number("9.46073E+12"), PC: Number("3.08568E+13"), G: Number("6.6740831E-11"), GM: Number("2.9591220828559093E-4"), Planets: ["Sun", "Mercury", "Venus", "Earth", "Moon", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"], Sun: { radius: 696019, obliquity: 7.25, mass: Number("1.989E+30"), gm: Number("1.327124400189E+11") }, Mercury: { radius: 2439.7, obliquity: .027, mass: Number("3.301E+23"), gm: 220329 }, Venus: { radius: 6051.8, obliquity: 177.36, mass: Number("4.867E+24"), gm: 3248599 }, Earth: { radius: 6378.15, obliquity: 23.435, mass: Number("5.972E+24"), gm: Number("3.9860044189E+5") }, Moon: { radius: 1737.4, obliquity: 1.5424, mass: Number("7.346E+22"), gm: 4904.86959 }, Mars: { radius: 3397.2, obliquity: 25, mass: Number("6.417E+24"), gm: 42828.9 }, Jupiter: { radius: 71492, obliquity: 3.08, mass: Number("1.899E+27"), gm: 1266865349 }, Saturn: { radius: 60268, obliquity: 26.7, mass: Number("5.685E+26"), gm: 379311879 }, Uranus: { radius: 25559, obliquity: 97.9, mass: Number("8.682E+26"), gm: 57939399 }, Neptune: { radius: 24786, obliquity: 29.6, mass: Number("1.024E+26"), gm: 68365299 } }, Orb.Const = Orb.Constant, Orb.RoundAngle = Orb.RoundAngle || function (e) { var t = e % 360; return t < 0 && (t += 360), t }, Orb.Time = Orb.Time || function (e) { if (e) t = e; else var t = new Date; this.date = t, this.year = t.getUTCFullYear(), this.month = t.getUTCMonth() + 1, this.day = t.getUTCDate(), this.hours = t.getUTCHours(), this.minutes = t.getUTCMinutes(), this.seconds = t.getUTCSeconds(), this.milliseconds = t.getUTCMilliseconds() }, Orb.Time.prototype = { time_in_day: function () { return this.hours / 24 + this.minutes / 1440 + this.seconds / 86400 + this.milliseconds / 864e5 }, jd: function () { var e = this.year, t = this.month, a = this.day, i = this.time_in_day(); if (t <= 2) e = e - 1, t = t + 12; var r = Math.floor(365.25 * (e + 4716)) + Math.floor(30.6001 * (t + 1)) + a - 1524.5; if (r < 2299160.5) var s = 0; else { var o = Math.floor(e / 100); s = 2 - o + Math.floor(o / 4) } return r + s + i }, gmst: function () { var e = Orb.Constant.RAD, t = 3600 * this.hours + 60 * this.minutes + this.seconds + this.milliseconds / 1e3, a = (this.jd() - this.time_in_day() - 2451545) / 36525, i = (24110.5484 + 8640184.812866 * a + .093104 * a * a + 62e-7 * a * a * a) / 3600; 24 < i && (i %= 24); var r = i + 1.00273790925 * t / 3600, s = 23.43929111111111 - 46.815 / 3600 * a - 59e-5 / 3600 * a * a + .001813 / 3600 * a * a * a, o = 125.04452 - 1934.136261 * a + .0020708 * a * a + a * a * a / 45e4, n = 280.4665 + 36000.7698 * a, u = 218.3165 + 481267.8813 * a; return (r += (-17.2 * Math.sin(o * e) - -1.32 * Math.sin(2 * n * e) - .23 * Math.sin(2 * u * e) + .21 * Math.sin(2 * o * e)) / 15 * Math.cos(s * e) / 3600) < 0 && (r = r % 24 + 24), 24 < r && (r %= 24), r }, delta_t: function () { var e = this.year, t = e + (this.month - .5) / 12; if (e <= -500) var a = 32 * (r = (t - 1820) / 100) * r - 20; else if (-500 < e && e <= 500) a = 10583.6 - 1014.41 * (r = t / 100) + 33.78311 * r * r - 5.952053 * r * r * r - .1798452 * r * r * r * r + .022174192 * r * r * r * r * r + .0090316521 * r * r * r * r * r; else if (500 < e && e <= 1600) a = 1574.2 - 556.01 * (r = (t - 1e3) / 100) + 71.23472 * r * r + .319781 * r * r * r - .8503463 * r * r * r * r - .005050998 * r * r * r * r * r + .0083572073 * r * r * r * r * r * r; else if (1600 < e && e <= 1700) a = 120 - .9808 * (i = t - 1600) - .01532 * i * i + i * i * i / 7129; else if (1700 < e && e <= 1800) a = 8.83 + .1603 * (i = t - 1700) - .0059285 * i * i + 13336e-8 * i * i * i - i * i * i * i / 1174e3; else if (1800 < e && e <= 1860) a = 13.72 - .332447 * (i = t - 1800) + .0068612 * i * i + .0041116 * i * i * i - 37436e-8 * i * i * i * i + 121272e-10 * i * i * i * i * i - 1.699e-7 * i * i * i * i * i * i + 8.75e-10 * i * i * i * i * i * i * i; else if (1860 < e && e <= 1900) a = 7.62 + .5737 * (i = t - 1860) - .251754 * i * i + .01680668 * i * i * i - .0004473624 * i * i * i * i + i * i * i * i * i / 233174; else if (1900 < e && e <= 1920) a = 1.494119 * (i = t - 1900) - 2.79 - .0598939 * i * i + .0061966 * i * i * i - 197e-6 * i * i * i * i; else if (1920 < e && e <= 1941) a = 21.2 + .84493 * (i = t - 1920) - .0761 * i * i + .0020936 * i * i * i; else if (1941 < e && e <= 1961) a = 29.07 + .407 * (i = t - 1950) - i * i / 233 + i * i * i / 2547; else if (1961 < e && e <= 1986) a = 45.45 + 1.067 * (i = t - 1975) - i * i / 260 - i * i * i / 718; else if (1986 < e && e <= 2005) a = 63.86 + .3345 * (i = t - 2e3) - .060374 * i * i + .0017275 * i * i * i + 651814e-9 * i * i * i * i + 2373599e-11 * i * i * i * i * i; else if (2005 < e && e <= 2050) { var i; a = 62.92 + .32217 * (i = t - 2e3) + .005589 * i * i } else if (2050 < e && e <= 2150) a = (t - 1820) / 100 * 32 * ((t - 1820) / 100) - 20 - .5628 * (2150 - t); else if (2150 < e) { var r; a = 32 * (r = (t - 1820) / 100) * r - 20 } return a }, doy: function () { var e = this.date, t = new Date(Date.UTC(e.getFullYear() - 1, 11, 31, 0, 0, 0)); return ((e.getTime() - e.getTimezoneOffset() - t.getTime()) / 864e5).toFixed(8) } }, Orb.Earth = function () { }, Orb.Earth.prototype = { xyz: function (e) { for (var t = (new Orb.Time(e).jd() - 2451545) / 365250, a = [0, 0, 0], i = Orb.Terms.Earth, r = 0, s = i.length; r < s; r++) { var o = i[r], n = o[0], u = Math.pow(t, Number(o[1])) * Number(o[2]) * Math.cos(Number(o[3]) + Number(o[4]) * t); a[n] = a[n] + u } return { x: a[0], y: a[1], z: a[2], date: e, coordinate_keywords: "ecliptic rectangular", unit_keywords: "au" } }, radec: function (e) { return { ra: 0, dec: 0, distance: 0, date: e, coordinate_keywords: "equatorial spherical", unit_keywords: "hours degree" } } }, Orb.Terms = Orb.Terms || {}, Orb.Terms.Earth = [[0, 0, .99982928844, 1.75348568475, 6283.0758499914], [0, 0, .008352573, 1.7103453945, 12566.1516999828], [0, 0, .00561144206, 0, 0], [0, 0, .00010466628, 1.66722645223, 18849.2275499742], [0, 0, 3110838e-11, .66875185215, 83996.84731811189], [0, 0, 2552498e-11, .58310207301, 529.6909650946], [0, 0, 2137256e-11, 1.09235189672, 1577.3435424478], [0, 0, 1709103e-11, .49540223397, 6279.5527316424], [0, 0, 1707882e-11, 6.15315547484, 6286.5989683404], [0, 0, 1445242e-11, 3.4727278376, 2352.8661537718], [0, 0, 1091006e-11, 3.68984782465, 5223.6939198022], [0, 0, 934429e-11, 6.07389922585, 12036.4607348882], [0, 0, 899144e-11, 3.17571950523, 10213.285546211], [0, 0, 566514e-11, 2.15262034016, 1059.3819301892], [0, 0, 684416e-11, 1.30699021227, 5753.3848848968], [0, 0, 734455e-11, 4.3550019653, 398.1490034082], [0, 0, 681437e-11, 2.21821534685, 4705.7323075436], [0, 0, 611238e-11, 5.38479234323, 6812.766815086], [0, 0, 451836e-11, 6.08768280868, 5884.9268465832], [0, 0, 451953e-11, 1.27933728354, 6256.7775301916], [0, 0, 449517e-11, 5.36923831714, 6309.3741697912], [0, 0, 406248e-11, .54361367084, 6681.2248533996], [0, 0, 540957e-11, .78677364655, 775.522611324], [0, 0, 547004e-11, 1.46146650376, 14143.4952424306], [0, 0, 520484e-11, 4.43295799975, 7860.4193924392], [0, 0, 21496e-10, 4.50213844573, 11506.7697697936], [0, 0, 227892e-11, 1.23941482802, 7058.5984613154], [0, 0, 225878e-11, 3.27244306207, 4694.0029547076], [0, 0, 25582e-10, 2.26556277246, 12168.0026965746], [0, 0, 256182e-11, 1.4547411619, 709.9330485583], [0, 0, 17812e-10, 2.96205424204, 796.2980068164], [0, 0, 161205e-11, 1.47337718956, 5486.777843175], [0, 0, 178325e-11, 6.24374704602, 6283.14316029419], [0, 0, 178325e-11, .40466470869, 6283.0085396886], [0, 0, 155487e-11, 1.62409309523, 25132.3033999656], [0, 0, 209024e-11, 5.85207528073, 11790.6290886588], [0, 0, 199971e-11, 4.07209938245, 17789.845619785], [0, 0, 128933e-11, 5.2169331415, 7079.3738568078], [0, 0, 128099e-11, 4.80182882228, 3738.761430108], [0, 0, 151691e-11, .86921639327, 213.299095438], [0, 1, .00123403056, 0, 0], [0, 1, .00051500156, 6.00266267204, 12566.1516999828], [0, 1, 1290726e-11, 5.95943124583, 18849.2275499742], [0, 1, 1068627e-11, 2.01554176551, 6283.0758499914], [0, 1, 212689e-11, 1.73380190491, 6279.5527316424], [0, 1, 212515e-11, 4.91489371033, 6286.5989683404], [0, 1, 6.226e-7, .36239798178, 4705.7323075436], [0, 1, 5.9822e-7, 3.81195369871, 6256.7775301916], [0, 1, 5.9514e-7, 2.8363416015, 6309.3741697912], [0, 1, 4.8841e-7, 5.21419389335, 775.522611324], [0, 1, 4.2883e-7, .43789776559, 1059.3819301892], [0, 1, 4.6286e-7, .01839494103, 7860.4193924392], [0, 1, 3.5675e-7, 1.45279327264, 5884.9268465832], [0, 1, 3.6061e-7, 2.16002201071, 5753.3848848968], [0, 1, 3.5367e-7, 4.47243820095, 6812.766815086], [0, 1, 3.2137e-7, 5.19589851893, 6681.2248533996], [0, 1, 2.8763e-7, 5.91618989512, 25132.3033999656], [0, 1, 2.8447e-7, 1.14976253807, 6127.6554505572], [0, 1, 2.7573e-7, 5.50119104683, 6438.4962494256], [0, 1, 2.4815e-7, 2.92204909812, 5486.777843175], [0, 1, 2.0611e-7, 3.71790880968, 7079.3738568078], [0, 1, 1.9565e-7, 2.89351924469, 5507.5532386674], [0, 1, 1.8308e-7, 1.46954314992, 11790.6290886588], [0, 1, 1.6471e-7, 6.22682639292, 11506.7697697936], [0, 1, 1.6757e-7, 3.81935015812, 7058.5984613154], [0, 1, 1.4555e-7, 5.97554823531, 6290.1893969922], [0, 1, 1.4388e-7, .68157599309, 6275.9623029906], [0, 1, 1.3921e-7, 1.44156172409, 796.2980068164], [0, 1, 1.1845e-7, 4.15246503623, 4694.0029547076], [0, 1, 1.2573e-7, .30429978572, 7.1135470008], [0, 1, 1.0073e-7, 3.28940171828, 3738.761430108], [0, 1, 1.0425e-7, 4.26610810148, 6282.0955289232], [0, 1, 1.0425e-7, 2.38242547117, 6284.0561710596], [0, 2, 4143217e-11, 3.14159265359, 0], [0, 2, 2175695e-11, 4.39999849572, 12566.1516999828], [0, 2, 995233e-11, .20790847155, 6283.0758499914], [0, 2, 9.2659e-7, 4.1928547101, 18849.2275499742], [0, 2, 1.3679e-7, 3.37833642063, 6286.5989683404], [0, 2, 1.3668e-7, 3.27271492019, 6279.5527316424], [0, 3, 175213e-11, 3.14159265359, 0], [0, 3, 7.2337e-7, 2.89303952476, 12566.1516999828], [0, 3, 8.364e-8, 3.85500954096, 6283.0758499914], [0, 3, 5.04e-8, 2.53152989786, 18849.2275499742], [0, 3, 1.481e-8, 2.23672235234, 6438.4962494256], [0, 3, 1.481e-8, 4.41181122031, 6127.6554505572], [0, 4, 4.022e-8, 0, 0], [0, 4, 1.927e-8, 1.18746233453, 12566.1516999828], [1, 0, .9998921103, .18265890456, 6283.0758499914], [1, 0, .02442699036, 3.14159265359, 0], [1, 0, .00835292314, .13952878991, 12566.1516999828], [1, 0, .00010466965, .09641690558, 18849.2275499742], [1, 0, 3110838e-11, 5.38114091484, 83996.84731811189], [1, 0, 2570338e-11, 5.3010397336, 529.6909650946], [1, 0, 2147473e-11, 2.66253538905, 1577.3435424478], [1, 0, 1709219e-11, 5.20780401071, 6279.5527316424], [1, 0, 1707987e-11, 4.58232858766, 6286.5989683404], [1, 0, 1440265e-11, 1.90068164664, 2352.8661537718], [1, 0, 1135092e-11, 5.2731341522, 5223.6939198022], [1, 0, 934539e-11, 4.50301201844, 12036.4607348882], [1, 0, 900565e-11, 1.6056328812, 10213.285546211], [1, 0, 567126e-11, .58142248753, 1059.3819301892], [1, 0, 744932e-11, 2.80728871886, 398.1490034082], [1, 0, 639316e-11, 6.02923915017, 5753.3848848968], [1, 0, 681324e-11, .64729627497, 4705.7323075436], [1, 0, 611347e-11, 3.81381495286, 6812.766815086], [1, 0, 450435e-11, 4.52785572489, 5884.9268465832], [1, 0, 452018e-11, 5.99167242707, 6256.7775301916], [1, 0, 449968e-11, 3.79880375595, 6309.3741697912], [1, 0, 55139e-10, 3.96125249369, 5507.5532386674], [1, 0, 406334e-11, 5.25616268027, 6681.2248533996], [1, 0, 541273e-11, 5.49902805917, 775.522611324], [1, 0, 54636e-10, 6.17311131785, 14143.4952424306], [1, 0, 507084e-11, 2.87025193381, 7860.4193924392], [1, 0, 219504e-11, 2.95216139568, 11506.7697697936], [1, 0, 227937e-11, 5.95179248814, 7058.5984613154], [1, 0, 227792e-11, 4.84547074733, 4694.0029547076], [1, 0, 255845e-11, .69454231563, 12168.0026965746], [1, 0, 256132e-11, 6.16722512388, 709.9330485583], [1, 0, 179242e-11, 1.40003446021, 796.2980068164], [1, 0, 17828e-10, 5.11717552231, 6283.0085396886], [1, 0, 17828e-10, 4.67307255246, 6283.14316029419], [1, 0, 155454e-11, .05340525434, 25132.3033999656], [1, 0, 206257e-11, 4.28366728882, 11790.6290886588], [1, 0, 149769e-11, 6.07429023278, 5486.777843175], [1, 0, 200005e-11, 2.5014408812, 17789.845619785], [1, 0, 129006e-11, 3.64623708634, 7079.3738568078], [1, 0, 128211e-11, 3.23254821381, 3738.761430108], [1, 0, 15279e-10, 5.5812080045, 213.299095438], [1, 0, 118725e-11, 5.45361490488, 9437.762934887], [1, 1, .00093046324, 0, 0], [1, 1, .00051506609, 4.43180499286, 12566.1516999828], [1, 1, 12908e-9, 4.3886054854, 18849.2275499742], [1, 1, 46455e-10, 5.82729912952, 6283.0758499914], [1, 1, 212689e-11, .16300556918, 6279.5527316424], [1, 1, 212533e-11, 3.34400595407, 6286.5989683404], [1, 1, 6.2345e-7, 5.07377354827, 4705.7323075436], [1, 1, 5.9794e-7, 2.24100907272, 6256.7775301916], [1, 1, 5.9441e-7, 1.26619990626, 6309.3741697912], [1, 1, 4.8987e-7, 3.64166577835, 775.522611324], [1, 1, 4.2746e-7, 5.15177425824, 1059.3819301892], [1, 1, 4.6642e-7, 4.715752158, 7860.4193924392], [1, 1, 3.7274e-7, .66041323804, 5753.3848848968], [1, 1, 3.5625e-7, 6.15462846966, 5884.9268465832], [1, 1, 3.5373e-7, 2.90052012152, 6812.766815086], [1, 1, 3.2157e-7, 3.62669702015, 6681.2248533996], [1, 1, 2.8763e-7, 4.34539355621, 25132.3033999656], [1, 1, 2.8447e-7, 5.86215103214, 6127.6554505572], [1, 1, 2.7502e-7, 3.92641632542, 6438.4962494256], [1, 1, 2.483e-7, 1.35190115953, 5486.777843175], [1, 1, 2.0618e-7, 2.14772396647, 7079.3738568078], [1, 1, 1.9531e-7, 1.29958310594, 5507.5532386674], [1, 1, 1.8447e-7, 6.17330532651, 11790.6290886588], [1, 1, 1.652e-7, 4.63328039489, 11506.7697697936], [1, 1, 1.6754e-7, 2.24862220282, 7058.5984613154], [1, 1, 1.456e-7, 4.40425761361, 6290.1893969922], [1, 1, 1.4426e-7, 5.39226330857, 6275.9623029906], [1, 1, 1.4186e-7, 6.18547219419, 796.2980068164], [1, 1, 1.2666e-7, 5.73231393752, 4694.0029547076], [1, 1, 1.2966e-7, 5.10338935824, 7.1135470008], [1, 1, 101e-9, 1.72464513593, 3738.761430108], [1, 1, 1.0425e-7, 2.69531177468, 6282.0955289232], [1, 1, 1.0425e-7, .81162914438, 6284.0561710596], [1, 2, 5080208e-11, 0, 0], [1, 2, 2178016e-11, 2.82957544235, 12566.1516999828], [1, 2, 1020487e-11, 4.63746718598, 6283.0758499914], [1, 2, 9.2688e-7, 2.6221874842, 18849.2275499742], [1, 2, 1.368e-7, 1.80736896884, 6286.5989683404], [1, 2, 1.3668e-7, 1.70191859339, 6279.5527316424], [1, 3, 128116e-11, 3.14159265359, 0], [1, 3, 7.2366e-7, 1.32019314413, 12566.1516999828], [1, 3, 1.3847e-7, 5.37444701633, 6283.0758499914], [1, 3, 5.044e-8, .96001931081, 18849.2275499742], [1, 3, 1.481e-8, .66592602555, 6438.4962494256], [1, 3, 1.481e-8, 2.84101489351, 6127.6554505572], [1, 4, 4.187e-8, 3.14159265359, 0], [1, 4, 1.931e-8, 5.89883838, 12566.1516999828], [2, 0, 27962e-10, 3.19870156017, 84334.66158130829], [2, 0, 101625e-11, 5.42248110597, 5507.5532386674], [2, 1, .00227822442, 3.41372504278, 6283.0758499914], [2, 1, 5429282e-11, 0, 0], [2, 1, 1903183e-11, 3.37061270964, 12566.1516999828], [2, 1, 2.3859e-7, 3.32836261978, 18849.2275499742], [2, 2, 9721989e-11, 5.15233725915, 6283.0758499914], [2, 2, 349501e-11, 3.14159265359, 0], [2, 2, 6.7136e-7, .64403888586, 12566.1516999828], [2, 3, 276077e-11, .5941325873, 6283.0758499914], [2, 3, 2.5551e-7, 3.14159265359, 0], [2, 3, 1.81e-8, .11612262117, 12566.1516999828], [2, 4, 5.751e-8, 2.27069090892, 6283.0758499914], [2, 4, 1.305e-8, 0, 0]], Orb.NutationAndObliquity = Orb.NutationAndObliquity || function (e) { var t = Orb.Constant.RAD, a = (new Orb.Time(e).jd() - 2451545) / 36525, i = (125.04452 - 1934.136261 * a + .0020708 * a * a + (a * a + a) / 45e4) * t, r = (280.4665 + 36000.7698 * a) * t, s = (218.3165 + 481267.8813 * a) * t; return { nutation: function () { return -17.2 / 3600 * Math.sin(i) - -1.32 / 3600 * Math.sin(2 * r) - .23 / 3600 * Math.sin(2 * s) + .21 / 3600 * Math.sin(2 * i) / t }, obliquity: function () { return 23.43929111111111 - 46.815 / 3600 * a - 59e-5 / 3600 * a * a + .001813 / 3600 * a * a * a + (9.2 / 3600 * Math.cos(i) + .57 / 3600 * Math.cos(2 * r) + .1 / 3600 * Math.cos(2 * s) - .09 / 3600 * Math.cos(2 * i)) } } }, Orb.Obliquity = Orb.Obliquity || function (e) { return new Orb.NutationAndObliquity(e).obliquity() }, Orb.RadecToXYZ = function (e) { var t = Orb.Const.RAD, a = 15 * e.ra, i = e.dec, r = e.distance; if (e.date) var s = e.date; else s = null; var o = { x: r * Math.cos(i * t) * Math.cos(a * t), y: r * Math.cos(i * t) * Math.sin(a * t), z: r * Math.sin(i * t) }; return { x: o.x, y: o.y, z: o.z, date: s, coordinate_keywords: "equatorial rectangular", unit_keywords: "" } }, Orb.XYZtoRadec = function (e) { if (e.coordinate_keywords && e.coordinate_keywords.match(/ecliptic/)) { if (e.date) var t = e.date; else t = new Date; var a = Orb.EclipticToEquatorial({ date: t, ecliptic: e }) } else { a = e; if (e.date) t = e.date; else t = null } var i = Math.PI / 180, r = a.x, s = a.y, o = a.z, n = Math.atan2(s, r) / i; return n < 0 && (n = n % 360 + 360), 360 < n && (n %= 360), { ra: n /= 15, dec: Math.atan2(o, Math.sqrt(r * r + s * s)) / i, distance: Math.sqrt(r * r + s * s + o * o), date: t, coordinate_keywords: "equatorial spherical", unit_keywords: "hours degree" } }, Orb.EquatorialToEcliptic = function (e) { var t = e.date, a = Orb.Obliquity(t), i = e.equatorial, r = Orb.Const.RAD, s = { x: i.x, y: Math.cos(a * r) * i.y + Math.sin(a * r) * i.z, z: -Math.sin(a * r) * i.y + Math.cos(a * r) * i.z }; return { x: s.x, y: s.y, z: s.z, date: t, coordinate_keywords: "ecliptic rectangular", unit_keywords: "" } }, Orb.EclipticToEquatorial = function (e) { var t = e.date, a = e.ecliptic, i = Orb.Const.RAD, r = (new Orb.Earth).xyz(t), s = a.x - r.x, o = a.y - r.y, n = a.z - r.z, u = Orb.Obliquity(e.date), h = { x: s, y: o * Math.cos(u * i) - n * Math.sin(u * i), z: o * Math.sin(u * i) + n * Math.cos(u * i) }; return { x: h.x, y: h.y, z: h.z, date: t, coordinate_keywords: "equatorial rectangular", unit_keywords: "" } }, Orb.Observer = Orb.Observer || function (e) { var t = Orb.Constant.RAD; Math.sqrt(1 - .006674372230614 * Math.cos(e.latitude * t)); this.latitude = e.latitude, this.longitude = e.longitude, this.altitude = e.altitude }, Orb.Observer.prototype = { rectangular: function (e) { var t = Orb.Constant.RAD, a = this.latitude, i = this.longitude, r = 15 * e.gmst() + i, s = 6378.135 + this.altitude, o = .00335277945, n = Math.sin(a * t), u = 1 / Math.sqrt(1 + o * (o - 2) * n * n), h = (1 - o) * (1 - o) * u; return { x: s * u * Math.cos(a * t) * Math.cos(r * t), y: s * u * Math.cos(a * t) * Math.sin(r * t), z: s * h * Math.sin(a * t) } } }, Orb.Observation = Orb.Observation || function (e) { this.observer = e.observer, this.target = e.target }, Orb.Observation.prototype = { RadecToHorizontal: function (e, t) { var a = Orb.Constant.RAD, i = this.observer, r = Number(t.ra), s = Number(t.dec); if (null != t.distance) var o = Number(t.distance); else o = void 0; var n = Number(i.latitude), u = Number(i.longitude); Number(i.altitutude); s *= a; var h = (15 * e.gmst() + u - 15 * r) * a, c = n * a, l = Math.atan2(-Math.cos(s) * Math.sin(h), Math.sin(s) * Math.cos(c) - Math.cos(s) * Math.sin(c) * Math.cos(h)) / a; return l < 0 && (l = l % 360 + 360), { azimuth: l, elevation: Math.asin(Math.sin(s) * Math.sin(c) + Math.cos(c) * Math.cos(s) * Math.cos(h)) / a, distance: o } }, RectToHorizontal: function (e, t) { var a = Orb.Constant.RAD, i = this.observer, r = i.latitude, s = i.longitude, o = new Orb.Observer(i).rectangular(e), n = t.x - o.x, u = t.y - o.y, h = t.z - o.z, c = 15 * e.gmst() + s, l = Math.sin(r * a) * Math.cos(c * a) * n + Math.sin(r * a) * Math.sin(c * a) * u - Math.cos(r * a) * h, d = -Math.sin(c * a) * n + Math.cos(c * a) * u, b = Math.cos(r * a) * Math.cos(c * a) * n + Math.cos(r * a) * Math.sin(c * a) * u + Math.sin(r * a) * h, m = Math.sqrt(l * l + d * d + b * b), M = Math.asin(b / m), y = Math.atan2(-d, l); return 360 < (y = y / a + 180) && (y %= 360), { azimuth: y, elevation: M, distance: m } }, azel: function (e) { Orb.Constant.RAD; var t = this.target, a = (this.observer, new Orb.Time(e)); function i(e) { return e.unit_keywords.match(/km/) ? "km" : e.unit_keywords.match(/au/) ? "au" : void 0 } if (null != t.ra && null != t.dec) var r = this.RadecToHorizontal(a, t), s = "au"; else if (null != t.x && null != t.y && null != t.z) { if (t.coordinate_keywords.match(/ecliptic/)) { if (null != t.date) var o = t.date; else o = e; var n = Orb.EclipticToEquatorial({ date: o, ecliptic: t }) } else n = t; r = this.RectToHorizontal(a, n), s = i(n) } else if (null != t.radec) { var u = t.radec(e); r = this.RadecToHorizontal(a, u), s = i(u) } else if (null != t.xyz) n = t.xyz(e), r = this.RectToHorizontal(a, n), s = i(n); return { azimuth: r.azimuth, elevation: r.elevation, distance: r.distance, date: e, coordinate_keywords: "horizontal spherical", unit_keywords: "degree " + s } } }, Orb.SGP4 = Orb.SGP4 || function (e) { this.tle = e, this.orbital_elements = this.DecodeTLE(), this.sgp4 = this.SetSGP4(), this.orbital_period = this.sgp4.orbital_period, this.apogee = this.sgp4.apogee, this.perigee = this.sgp4.perigee }, Orb.SGP4.prototype = { DecodeTLE: function () { var e = this.tle, t = e.name, a = e.first_line, i = e.second_line, r = Number(a.slice(18, 20)); if (r < 57) var s = r + 2e3; else s = r + 1900; var o = 1e-5 * Number(a.substring(53, 59)), n = Number("1e" + Number(a.substring(59, 61))), u = o * n; return { name: t, line_number_1: Number(a.slice(0, 0)), catalog_no_1: Number(a.slice(2, 6)), security_classification: Number(a.slice(7, 7)), international_identification: Number(a.slice(9, 17)), epoch_year: s, epoch: Number(a.substring(20, 32)), first_derivative_mean_motion: Number(a.substring(33, 43)), second_derivative_mean_motion: Number(a.substring(44, 52)), bstar_mantissa: o, bstar_exponent: n, bstar: u, ephemeris_type: Number(a.substring(62, 63)), element_number: Number(a.substring(64, 68)), check_sum_1: Number(a.substring(69, 69)), line_number_2: Number(a.slice(0, 0)), catalog_no_2: Number(i.slice(2, 7)), inclination: Number(i.substring(8, 16)), right_ascension: Number(i.substring(17, 25)), eccentricity: Number(i.substring(26, 33)), argument_of_perigee: Number(i.substring(34, 42)), mean_anomaly: Number(i.substring(43, 51)), mean_motion: Number(i.substring(52, 63)), rev_number_at_epoch: Number(i.substring(64, 68)), check_sum_2: Number(a.substring(68, 69)) } }, SetSGP4: function () { var e = this.orbital_elements, t = Math.PI / 180, a = 541308e-9, i = .66666667, r = .0743669161, s = 6378.135, o = e.epoch, n = e.epoch_year, u = e.bstar, h = e.inclination * t, c = e.right_ascension * t, l = 1e-7 * e.eccentricity, d = e.argument_of_perigee * t, b = e.mean_anomaly * t, m = 2 * e.mean_motion * Math.PI / 1440, M = Math.pow(r / m, i), y = Math.cos(h), f = y * y, g = 3 * f - 1, _ = 1 - l * l, v = Math.sqrt(_), p = 1.5 * a * g / (M * M * v * _), O = M * (1 - p * (1 / 3 + p * (1 + 134 / 81 * p))), x = 1.5 * a * g / (O * O * v * _), N = m / (1 + x), w = O / (1 - x), z = 1440 / Number(e.mean_motion), q = 0; w * (1 - l) < 220 / s + 1 && (q = 1); var T = 1.01222928, E = 1.88027916e-9, k = (w * (1 - l) - 1) * s, C = (w * (1 + l) - 1) * s; if (k < 156) if (T = k - 78, k <= 98) T = 20; else { E = Math.pow((120 - T) / s, 4); T = T / s + 1 } var R = 1 / (w * w * _ * _), D = 1 / (w - T), A = w * l * D, S = A * A, P = l * A, U = Math.abs(1 - S), G = E * Math.pow(D, 4), I = G / Math.pow(U, 3.5), H = u * (I * N * (w * (1 + 1.5 * S + P * (4 + S)) + .75 * a * D / U * g * (8 + 3 * S * (8 + S)))), L = Math.sin(h), Y = 253881e-11 / a * Math.pow(1, 3), j = G * D * Y * N * 1 * L / l, F = 1 - f, V = 2 * N * I * w * _ * (A * (2 + .5 * S) + l * (.5 + 2 * S) - 2 * a * D / (w * U) * (-3 * g * (1 - 2 * P + S * (1.5 - .5 * P)) + .75 * F * (2 * S - P * (1 + S)) * Math.cos(2 * d))), J = 2 * I * w * _ * (1 + 2.75 * (S + P) + P * S), X = f * f, Z = 3 * a * R * N, K = Z * a * R, B = 1.25 * 6.2098875e-7 * R * R * N, Q = -Z * y, W = .125 * Y * L * (3 + 5 * y) / (1 + y), $ = .25 * Y * L; if (1 != q) var ee = H * H, te = 4 * w * D * ee, ae = te * D * H / 3, ie = (17 * w + T) * ae, re = .5 * ae * w * D * (221 * w + 31 * T) * H, se = te + 2 * ee, oe = .25 * (3 * ie + H * (12 * te + 10 * ee)), ne = .2 * (3 * re + 12 * H * ie + 6 * te * te + 15 * ee * (2 * te + ee)); return { orbital_elements: e, apogee: C, perigee: k, orbital_period: z, epoch_year: n, epoch: o, xmo: b, xmdot: N + .5 * Z * v * g + .0625 * K * v * (13 - 78 * f + 137 * X), omegao: d, omgdot: -.5 * Z * (1 - 5 * f) + .0625 * K * (7 - 114 * f + 395 * X) + B * (3 - 36 * f + 49 * X), xnodeo: c, xnodot: Q + (.5 * K * (4 - 19 * f) + 2 * B * (3 - 7 * f)) * y, xnodcf: 3.5 * _ * Q * H, bstar: u, t2cof: 1.5 * H, omgcof: u * j * Math.cos(d), isimp: q, xmcof: -i * G * u * 1 / P, eta: A, delmo: Math.pow(1 + A * Math.cos(b), 3), c1: H, c4: V, c5: J, d2: te, d3: ie, d4: re, sinmo: Math.sin(b), t3cof: se, t4cof: oe, t5cof: ne, aodp: w, eo: l, xnodp: N, xke: r, xlcof: W, aycof: $, x3thm1: g, x1mth2: F, xincl: h, cosio: y, sinio: L, e6a: 1e-6, ck2: a, x7thm1: 7 * f - 1, xkmper: s } }, ExecSGP4: function (e) { Orb.Constant.RAD; var t, a, i, r = this.sgp4, s = this.orbital_elements, o = (t = s.epoch_year, a = s.epoch, i = t - 1, (Date.UTC(e.year, e.month - 1, e.day, e.hours, e.minutes, e.seconds, e.milliseconds) - (Date.UTC(i, 11, 31, 0, 0, 0) + 24 * a * 60 * 60 * 1e3)) / 6e4), n = r.xmo, u = r.xmdot, h = r.omegao, c = r.omgdot, l = r.xnodeo, d = r.xnodot, b = r.xnodcf, m = r.bstar, M = r.t2cof, y = r.omgcof, f = r.isimp, g = r.xmcof, _ = r.eta, v = r.delmo, p = r.c1, O = r.c4, x = r.c5, N = r.d2, w = r.d3, z = r.d4, q = r.sinmo, T = r.t3cof, E = r.t4cof, k = r.t5cof, C = r.aodp, R = r.eo, D = r.xnodp, A = r.xke, S = r.xlcof, P = r.aycof, U = r.x3thm1, G = r.x1mth2, I = r.xincl, H = r.cosio, L = r.sinio, Y = r.e6a, j = r.ck2, F = r.x7thm1, V = r.xkmper, J = (r.epoch_year, r.epoch, n + u * o), X = h + c * o, Z = X, K = J, B = o * o, Q = l + d * o + b * B, W = 1 - p * o, $ = m * O * o, ee = M * B; if (1 != f) { K = J + (Re = y * o + g * (Math.pow(1 + _ * Math.cos(J), 3) - v)), Z = X - Re; var te = B * o, ae = o * te; W = W - N * B - w * te - z * ae, $ = $ + m * x * (Math.sin(K) - q), ee = ee + T * te + ae * (E + o * k) } for (var ie = C * W * W, re = R - $, se = K + Z + Q + D * ee, oe = Math.sqrt(1 - re * re), ne = A / Math.pow(ie, 1.5), ue = re * Math.cos(Z), he = (Re = 1 / (ie * oe * oe)) * P, ce = se + Re * S * ue, le = re * Math.sin(Z) + he, de = (ce - Q) % (2 * Math.PI), be = de, me = 1; me <= 10; me++) { var Me = Math.sin(be), ye = Math.cos(be), fe = le * ye, ge = ue * ye, _e = le * Me, ve = (de - fe + (pe = ue * Me) - be) / (1 - ge - _e) + be; if (Math.abs(ve - be) <= Y) break; be = ve } var pe, Oe = pe - fe, xe = ie * (Re = 1 - (ue * ue + le * le)), Ne = ie * (1 - (ge + _e)), we = 1 / Ne, ze = A * Math.sqrt(ie) * Oe * we, qe = A * Math.sqrt(xe) * we, Te = (be = ie * we, Math.sqrt(Re)), Ee = be * (ye - ue + le * Oe * (pe = 1 / (1 + Te))), ke = be * (Me - le - ue * Oe * pe), Ce = Math.atan2(ke, Ee); Ce < 0 && (Ce += 2 * Math.PI); var Re, De = 2 * ke * Ee, Ae = 2 * Ee * Ee - 1, Se = Ne * (1 - 1.5 * (be = (we = j * (Re = 1 / xe)) * Re) * Te * U) + .5 * we * G * Ae, Pe = Ce - .25 * be * F * De, Ue = Q + 1.5 * be * H * De, Ge = I + 1.5 * be * H * L * Ae, Ie = ze - ne * we * G * De, He = qe + ne * we * (G * Ae + 1.5 * U), Le = Math.sin(Pe), Ye = Math.cos(Pe), je = Math.sin(Ge), Fe = Math.cos(Ge), Ve = Math.sin(Ue), Je = Math.cos(Ue), Xe = -Ve * Fe, Ze = Je * Fe, Ke = Xe * Le + Je * Ye, Be = Ze * Le + Ve * Ye, Qe = je * Le; return { x: Se * Ke * V, y: Se * Be * V, z: Se * Qe * V, xdot: (Ie * Ke + He * (Xe * Ye - Je * Le)) * V / 60, ydot: (Ie * Be + He * (Ze * Ye - Ve * Le)) * V / 60, zdot: (Ie * Qe + He * (je * Ye)) * V / 60 } }, RectangularToGeographic: function (e, t) { e = e; var a = t.x, i = t.y, r = t.z, s = t.xdot, o = t.ydot, n = t.zdot, u = Orb.Constant.RAD, h = 15 * e.gmst(), c = .00335277945, l = Math.sqrt(a * a + i * i), d = Math.atan2(i, a) / u - h; 360 < d && (d %= 360), d < 0 && (d = d % 360 + 360), 180 < d && (d -= 360); var b = Math.atan2(r, l), m = c * (2 - c), M = 0; do { M = b; var y = Math.sin(M), f = 1 / Math.sqrt(1 - m * y * y); b = Math.atan2(r + 6378.135 * f * m * Math.sin(M), l) } while (1e-4 < Math.abs(b - M)); return { longitude: d, latitude: b / u, altitude: l / Math.cos(b) - 6378.135 * f, velocity: Math.sqrt(s * s + o * o + n * n) } }, xyz: function (e) { var t = new Orb.Time(e), a = this.ExecSGP4(t); return { x: a.x, y: a.y, z: a.z, xdot: a.xdot, ydot: a.ydot, zdot: a.zdot, date: e, coordinate_keywords: "equational rectangular", unit_keywords: "km" } }, latlng: function (e) { var t = new Orb.Time(e), a = this.ExecSGP4(t), i = this.RectangularToGeographic(t, a); return { latitude: i.latitude, longitude: i.longitude, altitude: i.altitude, velocity: i.velocity, date: e, coordinate_keywords: "geographic spherical", unit_keywords: "degree km" } } }, Orb.Satellite = Orb.Satellite || Orb.SGP4;
